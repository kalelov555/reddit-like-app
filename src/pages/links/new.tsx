import { Box, Typography, TextField, Button } from "@mui/material";
import styles from "../../styles/Home.module.css";
import Head from "next/head";
import { Navbar } from "components/Navbar/Navbar";
import { useFormik } from "formik";
import * as yup from "yup";
import { useMutation } from "@apollo/client";
import { CREATE_FEED_MUTATION } from "mutations/posts";
import { useRouter } from "next/router";
import { notifyError, notifySuccess } from "utils/notifications";

const validationSchema = yup.object({
  url: yup.string().required("Url is required!"),
  description: yup.string().required("Description is required"),
});

const CreateLink = () => {
  const router = useRouter();

  const [createPost] = useMutation(CREATE_FEED_MUTATION, {
    onCompleted: () => {
      notifySuccess("Link successfully created!");
      router.replace("/");
    },
    onError: (err) => {
      notifyError(err.message, "You have to login first");
      router.replace("/login");
    },
  });

  const formik = useFormik({
    initialValues: {
      url: "",
      description: "",
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      const { description, url } = values;
      createPost({ variables: { url, description } });
    },
  });

  return (
    <div className={styles.container}>
      <div className={styles.mainContainer}>
        <Head>
          <title>Home page</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>
        <Box sx={{ minWidth: 430 }}>
          <Typography variant='h5' sx={{ textAlign: "center" }}>
            New link
          </Typography>

          <form onSubmit={formik.handleSubmit} style={{ width: "90%" }}>
            <TextField
              fullWidth
              id='url'
              name='url'
              label='url'
              value={formik.values.url}
              onChange={formik.handleChange}
              error={formik.touched.url && Boolean(formik.errors.url)}
              helperText={formik.touched.url && formik.errors.url}
              sx={{ mt: 3 }}
            />
            <TextField
              fullWidth
              id='description'
              name='description'
              label='Description'
              value={formik.values.description}
              onChange={formik.handleChange}
              error={
                formik.touched.description && Boolean(formik.errors.description)
              }
              helperText={
                formik.touched.description && formik.errors.description
              }
              sx={{ mt: 3 }}
            />
            <Button
              color='primary'
              variant='contained'
              fullWidth
              type='submit'
              sx={{ mt: 3 }}
            >
              Submit
            </Button>
          </form>
        </Box>
        <Navbar />
      </div>
    </div>
  );
};

export default CreateLink;
